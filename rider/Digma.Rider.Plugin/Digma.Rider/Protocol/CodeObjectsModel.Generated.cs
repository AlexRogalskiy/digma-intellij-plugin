//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a RdGen v1.07.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Linq;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using JetBrains.Annotations;

using JetBrains.Core;
using JetBrains.Diagnostics;
using JetBrains.Collections;
using JetBrains.Collections.Viewable;
using JetBrains.Lifetimes;
using JetBrains.Serialization;
using JetBrains.Rd;
using JetBrains.Rd.Base;
using JetBrains.Rd.Impl;
using JetBrains.Rd.Tasks;
using JetBrains.Rd.Util;
using JetBrains.Rd.Text;


// ReSharper disable RedundantEmptyObjectCreationArgumentList
// ReSharper disable InconsistentNaming
// ReSharper disable RedundantOverflowCheckingContext


namespace Digma.Rider.Protocol
{
  
  
  /// <summary>
  /// <p>Generated from: CodeObjectsModel.kt:9</p>
  /// </summary>
  public class CodeObjectsModel : RdExtBase
  {
    //fields
    //public fields
    [NotNull] public ISignal<string> Reanalyze => _Reanalyze;
    [NotNull] public ISignal<Unit> ReanalyzeAll => _ReanalyzeAll;
    [NotNull] public ISignal<string> DocumentAnalyzed => _DocumentAnalyzed;
    [NotNull] public IViewableMap<string, Document> Documents => _Documents;
    [NotNull] public IViewableMap<string, RiderCodeLensInfo> CodeLens => _CodeLens;
    
    //private fields
    [NotNull] private readonly RdSignal<string> _Reanalyze;
    [NotNull] private readonly RdSignal<Unit> _ReanalyzeAll;
    [NotNull] private readonly RdSignal<string> _DocumentAnalyzed;
    [NotNull] private readonly RdMap<string, Document> _Documents;
    [NotNull] private readonly RdMap<string, RiderCodeLensInfo> _CodeLens;
    
    //primary constructor
    private CodeObjectsModel(
      [NotNull] RdSignal<string> reanalyze,
      [NotNull] RdSignal<Unit> reanalyzeAll,
      [NotNull] RdSignal<string> documentAnalyzed,
      [NotNull] RdMap<string, Document> documents,
      [NotNull] RdMap<string, RiderCodeLensInfo> codeLens
    )
    {
      if (reanalyze == null) throw new ArgumentNullException("reanalyze");
      if (reanalyzeAll == null) throw new ArgumentNullException("reanalyzeAll");
      if (documentAnalyzed == null) throw new ArgumentNullException("documentAnalyzed");
      if (documents == null) throw new ArgumentNullException("documents");
      if (codeLens == null) throw new ArgumentNullException("codeLens");
      
      _Reanalyze = reanalyze;
      _ReanalyzeAll = reanalyzeAll;
      _DocumentAnalyzed = documentAnalyzed;
      _Documents = documents;
      _CodeLens = codeLens;
      _CodeLens.OptimizeNested = true;
      BindableChildren.Add(new KeyValuePair<string, object>("reanalyze", _Reanalyze));
      BindableChildren.Add(new KeyValuePair<string, object>("reanalyzeAll", _ReanalyzeAll));
      BindableChildren.Add(new KeyValuePair<string, object>("documentAnalyzed", _DocumentAnalyzed));
      BindableChildren.Add(new KeyValuePair<string, object>("documents", _Documents));
      BindableChildren.Add(new KeyValuePair<string, object>("codeLens", _CodeLens));
    }
    //secondary constructor
    internal CodeObjectsModel (
    ) : this (
      new RdSignal<string>(JetBrains.Rd.Impl.Serializers.ReadString, JetBrains.Rd.Impl.Serializers.WriteString),
      new RdSignal<Unit>(JetBrains.Rd.Impl.Serializers.ReadVoid, JetBrains.Rd.Impl.Serializers.WriteVoid),
      new RdSignal<string>(JetBrains.Rd.Impl.Serializers.ReadString, JetBrains.Rd.Impl.Serializers.WriteString),
      new RdMap<string, Document>(JetBrains.Rd.Impl.Serializers.ReadString, JetBrains.Rd.Impl.Serializers.WriteString, Document.Read, Document.Write),
      new RdMap<string, RiderCodeLensInfo>(JetBrains.Rd.Impl.Serializers.ReadString, JetBrains.Rd.Impl.Serializers.WriteString, RiderCodeLensInfo.Read, RiderCodeLensInfo.Write)
    ) {}
    //deconstruct trait
    //statics
    
    
    
    protected override long SerializationHash => -2027658787819476082L;
    
    protected override Action<ISerializers> Register => RegisterDeclaredTypesSerializers;
    public static void RegisterDeclaredTypesSerializers(ISerializers serializers)
    {
      
      serializers.RegisterToplevelOnce(typeof(JetBrains.Rider.Model.IdeRoot), JetBrains.Rider.Model.IdeRoot.RegisterDeclaredTypesSerializers);
    }
    
    
    //constants
    
    //custom body
    //methods
    //equals trait
    //hash code trait
    //pretty print
    public override void Print(PrettyPrinter printer)
    {
      printer.Println("CodeObjectsModel (");
      using (printer.IndentCookie()) {
        printer.Print("reanalyze = "); _Reanalyze.PrintEx(printer); printer.Println();
        printer.Print("reanalyzeAll = "); _ReanalyzeAll.PrintEx(printer); printer.Println();
        printer.Print("documentAnalyzed = "); _DocumentAnalyzed.PrintEx(printer); printer.Println();
        printer.Print("documents = "); _Documents.PrintEx(printer); printer.Println();
        printer.Print("codeLens = "); _CodeLens.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  public static class SolutionCodeObjectsModelEx
   {
    public static CodeObjectsModel GetCodeObjectsModel(this JetBrains.Rider.Model.Solution solution)
    {
      return solution.GetOrCreateExtension("codeObjectsModel", () => new CodeObjectsModel());
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: CodeObjectsModel.kt:42</p>
  /// </summary>
  public sealed class Document : RdBindableBase
  {
    //fields
    //public fields
    [NotNull] public string Path {get; private set;}
    [NotNull] public IViewableMap<string, RiderMethodInfo> Methods => _Methods;
    
    //private fields
    [NotNull] private readonly RdMap<string, RiderMethodInfo> _Methods;
    
    //primary constructor
    private Document(
      [NotNull] string path,
      [NotNull] RdMap<string, RiderMethodInfo> methods
    )
    {
      if (path == null) throw new ArgumentNullException("path");
      if (methods == null) throw new ArgumentNullException("methods");
      
      Path = path;
      _Methods = methods;
      _Methods.OptimizeNested = true;
      BindableChildren.Add(new KeyValuePair<string, object>("methods", _Methods));
    }
    //secondary constructor
    public Document (
      [NotNull] string path
    ) : this (
      path,
      new RdMap<string, RiderMethodInfo>(JetBrains.Rd.Impl.Serializers.ReadString, JetBrains.Rd.Impl.Serializers.WriteString, RiderMethodInfo.Read, RiderMethodInfo.Write)
    ) {}
    //deconstruct trait
    //statics
    
    public static CtxReadDelegate<Document> Read = (ctx, reader) => 
    {
      var _id = RdId.Read(reader);
      var path = reader.ReadString();
      var methods = RdMap<string, RiderMethodInfo>.Read(ctx, reader, JetBrains.Rd.Impl.Serializers.ReadString, JetBrains.Rd.Impl.Serializers.WriteString, RiderMethodInfo.Read, RiderMethodInfo.Write);
      var _result = new Document(path, methods).WithId(_id);
      return _result;
    };
    
    public static CtxWriteDelegate<Document> Write = (ctx, writer, value) => 
    {
      value.RdId.Write(writer);
      writer.Write(value.Path);
      RdMap<string, RiderMethodInfo>.Write(ctx, writer, value._Methods);
    };
    
    //constants
    
    //custom body
    //methods
    //equals trait
    //hash code trait
    //pretty print
    public override void Print(PrettyPrinter printer)
    {
      printer.Println("Document (");
      using (printer.IndentCookie()) {
        printer.Print("path = "); Path.PrintEx(printer); printer.Println();
        printer.Print("methods = "); _Methods.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: CodeObjectsModel.kt:21</p>
  /// </summary>
  public sealed class RiderCodeLensInfo : IPrintable, IEquatable<RiderCodeLensInfo>
  {
    //fields
    //public fields
    [NotNull] public string CodeObjectId {get; private set;}
    [CanBeNull] public string LensText {get; private set;}
    [CanBeNull] public string LensTooltip {get; private set;}
    [CanBeNull] public string MoreText {get; private set;}
    [CanBeNull] public string Anchor {get; private set;}
    
    //private fields
    //primary constructor
    public RiderCodeLensInfo(
      [NotNull] string codeObjectId,
      [CanBeNull] string lensText,
      [CanBeNull] string lensTooltip,
      [CanBeNull] string moreText,
      [CanBeNull] string anchor
    )
    {
      if (codeObjectId == null) throw new ArgumentNullException("codeObjectId");
      
      CodeObjectId = codeObjectId;
      LensText = lensText;
      LensTooltip = lensTooltip;
      MoreText = moreText;
      Anchor = anchor;
    }
    //secondary constructor
    //deconstruct trait
    public void Deconstruct([NotNull] out string codeObjectId, [CanBeNull] out string lensText, [CanBeNull] out string lensTooltip, [CanBeNull] out string moreText, [CanBeNull] out string anchor)
    {
      codeObjectId = CodeObjectId;
      lensText = LensText;
      lensTooltip = LensTooltip;
      moreText = MoreText;
      anchor = Anchor;
    }
    //statics
    
    public static CtxReadDelegate<RiderCodeLensInfo> Read = (ctx, reader) => 
    {
      var codeObjectId = reader.ReadString();
      var lensText = ReadStringNullable(ctx, reader);
      var lensTooltip = ReadStringNullable(ctx, reader);
      var moreText = ReadStringNullable(ctx, reader);
      var anchor = ReadStringNullable(ctx, reader);
      var _result = new RiderCodeLensInfo(codeObjectId, lensText, lensTooltip, moreText, anchor);
      return _result;
    };
    public static CtxReadDelegate<string> ReadStringNullable = JetBrains.Rd.Impl.Serializers.ReadString.NullableClass();
    
    public static CtxWriteDelegate<RiderCodeLensInfo> Write = (ctx, writer, value) => 
    {
      writer.Write(value.CodeObjectId);
      WriteStringNullable(ctx, writer, value.LensText);
      WriteStringNullable(ctx, writer, value.LensTooltip);
      WriteStringNullable(ctx, writer, value.MoreText);
      WriteStringNullable(ctx, writer, value.Anchor);
    };
    public static  CtxWriteDelegate<string> WriteStringNullable = JetBrains.Rd.Impl.Serializers.WriteString.NullableClass();
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((RiderCodeLensInfo) obj);
    }
    public bool Equals(RiderCodeLensInfo other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return CodeObjectId == other.CodeObjectId && Equals(LensText, other.LensText) && Equals(LensTooltip, other.LensTooltip) && Equals(MoreText, other.MoreText) && Equals(Anchor, other.Anchor);
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + CodeObjectId.GetHashCode();
        hash = hash * 31 + (LensText != null ? LensText.GetHashCode() : 0);
        hash = hash * 31 + (LensTooltip != null ? LensTooltip.GetHashCode() : 0);
        hash = hash * 31 + (MoreText != null ? MoreText.GetHashCode() : 0);
        hash = hash * 31 + (Anchor != null ? Anchor.GetHashCode() : 0);
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("RiderCodeLensInfo (");
      using (printer.IndentCookie()) {
        printer.Print("codeObjectId = "); CodeObjectId.PrintEx(printer); printer.Println();
        printer.Print("lensText = "); LensText.PrintEx(printer); printer.Println();
        printer.Print("lensTooltip = "); LensTooltip.PrintEx(printer); printer.Println();
        printer.Print("moreText = "); MoreText.PrintEx(printer); printer.Println();
        printer.Print("anchor = "); Anchor.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: CodeObjectsModel.kt:12</p>
  /// </summary>
  public sealed class RiderMethodInfo : IPrintable, IEquatable<RiderMethodInfo>
  {
    //fields
    //public fields
    [NotNull] public string Id {get; private set;}
    [NotNull] public string Name {get; private set;}
    [NotNull] public string ContainingClass {get; private set;}
    [NotNull] public string ContainingNamespace {get; private set;}
    [NotNull] public string ContainingFileUri {get; private set;}
    
    //private fields
    //primary constructor
    public RiderMethodInfo(
      [NotNull] string id,
      [NotNull] string name,
      [NotNull] string containingClass,
      [NotNull] string containingNamespace,
      [NotNull] string containingFileUri
    )
    {
      if (id == null) throw new ArgumentNullException("id");
      if (name == null) throw new ArgumentNullException("name");
      if (containingClass == null) throw new ArgumentNullException("containingClass");
      if (containingNamespace == null) throw new ArgumentNullException("containingNamespace");
      if (containingFileUri == null) throw new ArgumentNullException("containingFileUri");
      
      Id = id;
      Name = name;
      ContainingClass = containingClass;
      ContainingNamespace = containingNamespace;
      ContainingFileUri = containingFileUri;
    }
    //secondary constructor
    //deconstruct trait
    public void Deconstruct([NotNull] out string id, [NotNull] out string name, [NotNull] out string containingClass, [NotNull] out string containingNamespace, [NotNull] out string containingFileUri)
    {
      id = Id;
      name = Name;
      containingClass = ContainingClass;
      containingNamespace = ContainingNamespace;
      containingFileUri = ContainingFileUri;
    }
    //statics
    
    public static CtxReadDelegate<RiderMethodInfo> Read = (ctx, reader) => 
    {
      var id = reader.ReadString();
      var name = reader.ReadString();
      var containingClass = reader.ReadString();
      var containingNamespace = reader.ReadString();
      var containingFileUri = reader.ReadString();
      var _result = new RiderMethodInfo(id, name, containingClass, containingNamespace, containingFileUri);
      return _result;
    };
    
    public static CtxWriteDelegate<RiderMethodInfo> Write = (ctx, writer, value) => 
    {
      writer.Write(value.Id);
      writer.Write(value.Name);
      writer.Write(value.ContainingClass);
      writer.Write(value.ContainingNamespace);
      writer.Write(value.ContainingFileUri);
    };
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((RiderMethodInfo) obj);
    }
    public bool Equals(RiderMethodInfo other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return Id == other.Id && Name == other.Name && ContainingClass == other.ContainingClass && ContainingNamespace == other.ContainingNamespace && ContainingFileUri == other.ContainingFileUri;
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + Id.GetHashCode();
        hash = hash * 31 + Name.GetHashCode();
        hash = hash * 31 + ContainingClass.GetHashCode();
        hash = hash * 31 + ContainingNamespace.GetHashCode();
        hash = hash * 31 + ContainingFileUri.GetHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("RiderMethodInfo (");
      using (printer.IndentCookie()) {
        printer.Print("id = "); Id.PrintEx(printer); printer.Println();
        printer.Print("name = "); Name.PrintEx(printer); printer.Println();
        printer.Print("containingClass = "); ContainingClass.PrintEx(printer); printer.Println();
        printer.Print("containingNamespace = "); ContainingNamespace.PrintEx(printer); printer.Println();
        printer.Print("containingFileUri = "); ContainingFileUri.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
}
