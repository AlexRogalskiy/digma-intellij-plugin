//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a RdGen v1.07.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Linq;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using JetBrains.Annotations;

using JetBrains.Core;
using JetBrains.Diagnostics;
using JetBrains.Collections;
using JetBrains.Collections.Viewable;
using JetBrains.Lifetimes;
using JetBrains.Serialization;
using JetBrains.Rd;
using JetBrains.Rd.Base;
using JetBrains.Rd.Impl;
using JetBrains.Rd.Tasks;
using JetBrains.Rd.Util;
using JetBrains.Rd.Text;


// ReSharper disable RedundantEmptyObjectCreationArgumentList
// ReSharper disable InconsistentNaming
// ReSharper disable RedundantOverflowCheckingContext


namespace Digma.Rider.Protocol
{
  
  
  /// <summary>
  /// <p>Generated from: ElementUnderCaretModel.kt:8</p>
  /// </summary>
  public class ElementUnderCaretModel : RdExtBase
  {
    //fields
    //public fields
    [NotNull] public IViewableProperty<Digma.Rider.Protocol.ElementUnderCaret> ElementUnderCaret => _ElementUnderCaret;
    [NotNull] public ISignal<Unit> Refresh => _Refresh;
    
    //private fields
    [NotNull] private readonly RdProperty<Digma.Rider.Protocol.ElementUnderCaret> _ElementUnderCaret;
    [NotNull] private readonly RdSignal<Unit> _Refresh;
    
    //primary constructor
    private ElementUnderCaretModel(
      [NotNull] RdProperty<Digma.Rider.Protocol.ElementUnderCaret> elementUnderCaret,
      [NotNull] RdSignal<Unit> refresh
    )
    {
      if (elementUnderCaret == null) throw new ArgumentNullException("elementUnderCaret");
      if (refresh == null) throw new ArgumentNullException("refresh");
      
      _ElementUnderCaret = elementUnderCaret;
      _Refresh = refresh;
      _ElementUnderCaret.OptimizeNested = true;
      BindableChildren.Add(new KeyValuePair<string, object>("elementUnderCaret", _ElementUnderCaret));
      BindableChildren.Add(new KeyValuePair<string, object>("refresh", _Refresh));
    }
    //secondary constructor
    internal ElementUnderCaretModel (
    ) : this (
      new RdProperty<Digma.Rider.Protocol.ElementUnderCaret>(Digma.Rider.Protocol.ElementUnderCaret.Read, Digma.Rider.Protocol.ElementUnderCaret.Write),
      new RdSignal<Unit>(JetBrains.Rd.Impl.Serializers.ReadVoid, JetBrains.Rd.Impl.Serializers.WriteVoid)
    ) {}
    //deconstruct trait
    //statics
    
    
    
    protected override long SerializationHash => 4784696159160401609L;
    
    protected override Action<ISerializers> Register => RegisterDeclaredTypesSerializers;
    public static void RegisterDeclaredTypesSerializers(ISerializers serializers)
    {
      
      serializers.RegisterToplevelOnce(typeof(JetBrains.Rider.Model.IdeRoot), JetBrains.Rider.Model.IdeRoot.RegisterDeclaredTypesSerializers);
    }
    
    
    //constants
    
    //custom body
    //methods
    //equals trait
    //hash code trait
    //pretty print
    public override void Print(PrettyPrinter printer)
    {
      printer.Println("ElementUnderCaretModel (");
      using (printer.IndentCookie()) {
        printer.Print("elementUnderCaret = "); _ElementUnderCaret.PrintEx(printer); printer.Println();
        printer.Print("refresh = "); _Refresh.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  public static class SolutionElementUnderCaretModelEx
   {
    public static ElementUnderCaretModel GetElementUnderCaretModel(this JetBrains.Rider.Model.Solution solution)
    {
      return solution.GetOrCreateExtension("elementUnderCaretModel", () => new ElementUnderCaretModel());
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: ElementUnderCaretModel.kt:10</p>
  /// </summary>
  public sealed class ElementUnderCaret : IPrintable, IEquatable<ElementUnderCaret>
  {
    //fields
    //public fields
    [NotNull] public string Fqn {get; private set;}
    [NotNull] public string Name {get; private set;}
    [NotNull] public string ClassName {get; private set;}
    [NotNull] public string FileUri {get; private set;}
    
    //private fields
    //primary constructor
    public ElementUnderCaret(
      [NotNull] string fqn,
      [NotNull] string name,
      [NotNull] string className,
      [NotNull] string fileUri
    )
    {
      if (fqn == null) throw new ArgumentNullException("fqn");
      if (name == null) throw new ArgumentNullException("name");
      if (className == null) throw new ArgumentNullException("className");
      if (fileUri == null) throw new ArgumentNullException("fileUri");
      
      Fqn = fqn;
      Name = name;
      ClassName = className;
      FileUri = fileUri;
    }
    //secondary constructor
    //deconstruct trait
    public void Deconstruct([NotNull] out string fqn, [NotNull] out string name, [NotNull] out string className, [NotNull] out string fileUri)
    {
      fqn = Fqn;
      name = Name;
      className = ClassName;
      fileUri = FileUri;
    }
    //statics
    
    public static CtxReadDelegate<ElementUnderCaret> Read = (ctx, reader) => 
    {
      var fqn = reader.ReadString();
      var name = reader.ReadString();
      var className = reader.ReadString();
      var fileUri = reader.ReadString();
      var _result = new ElementUnderCaret(fqn, name, className, fileUri);
      return _result;
    };
    
    public static CtxWriteDelegate<ElementUnderCaret> Write = (ctx, writer, value) => 
    {
      writer.Write(value.Fqn);
      writer.Write(value.Name);
      writer.Write(value.ClassName);
      writer.Write(value.FileUri);
    };
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((ElementUnderCaret) obj);
    }
    public bool Equals(ElementUnderCaret other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return Fqn == other.Fqn && Name == other.Name && ClassName == other.ClassName && FileUri == other.FileUri;
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + Fqn.GetHashCode();
        hash = hash * 31 + Name.GetHashCode();
        hash = hash * 31 + ClassName.GetHashCode();
        hash = hash * 31 + FileUri.GetHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("ElementUnderCaret (");
      using (printer.IndentCookie()) {
        printer.Print("fqn = "); Fqn.PrintEx(printer); printer.Println();
        printer.Print("name = "); Name.PrintEx(printer); printer.Println();
        printer.Print("className = "); ClassName.PrintEx(printer); printer.Println();
        printer.Print("fileUri = "); FileUri.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
}
